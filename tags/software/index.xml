<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software on John Forstmeier</title>
    <link>https://johnforstmeier.com/tags/software/</link>
    <description>Recent content in software on John Forstmeier</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Mar 2022 18:15:16 -0400</lastBuildDate>
    
	<atom:link href="https://johnforstmeier.com/tags/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reading: Chaos Monkeys</title>
      <link>https://johnforstmeier.com/notes/reading-chaos-monkeys/</link>
      <pubDate>Wed, 16 Mar 2022 18:15:16 -0400</pubDate>
      
      <guid>https://johnforstmeier.com/notes/reading-chaos-monkeys/</guid>
      <description>This is a brief summary of my takeaways from Chaos Monkeys [1] by Antonio Garcia Martinez [2].
It&amp;rsquo;s a phenomenal education without the textbook.
In particular, the way Martinez recounts navigating the interpersonal relationships in his professional endeavours is highly valuable. It is something that can only be taught directly (your own experience) or recounted (his own experience) - doing so in a classroom would be absurd and stilted.
Each pivotal moment felt like Martinez was managing individual incentives for the involved parties and netting them against each other in order to optimize each outcome.</description>
    </item>
    
    <item>
      <title>Software Development Emotional Cycle</title>
      <link>https://johnforstmeier.com/notes/software-development-emotional-cycle/</link>
      <pubDate>Thu, 10 Mar 2022 08:42:24 -0500</pubDate>
      
      <guid>https://johnforstmeier.com/notes/software-development-emotional-cycle/</guid>
      <description>Writing software typically occurs in rapid iterations and can have a similarly rapid emotional cycle attached to the work. Personally, this can be mapped to confidence over time in the plot below.
The pattern goes something like this:
 confidence increases as software is shipped something breaks which halts the rising confidence &amp;ldquo;Why did I ever choose to work in software?&amp;rdquo; =&amp;gt; self-loathing confidence moves lower while the problem is worked on something fixes the problem bottoming the drop &amp;ldquo;Why did I think I could do this?</description>
    </item>
    
    <item>
      <title>Better Bootcamp</title>
      <link>https://johnforstmeier.com/notes/better-bootcamp/</link>
      <pubDate>Tue, 12 Oct 2021 08:30:00 -0400</pubDate>
      
      <guid>https://johnforstmeier.com/notes/better-bootcamp/</guid>
      <description>Coding bootcamps seem to focus heavily on the coding aspect of development work. While teaching coding is important, I think bootcamps could differentiate themselves significantly by focusing on developing team-based skills and experience.
For example they could:
 provide students with guidance on how to receive and conduct pull request reviews go over designing and maintaining robust CI/CD pipelines instill best-practices for writing unit and integration tests participate in tasking stories and organizing development sprints  And this could potentially be done within the scope of a pre-existing open source project.</description>
    </item>
    
    <item>
      <title>Minimum Value Delivery</title>
      <link>https://johnforstmeier.com/notes/minimum-value-delivery/</link>
      <pubDate>Sun, 03 Oct 2021 23:00:00 -0400</pubDate>
      
      <guid>https://johnforstmeier.com/notes/minimum-value-delivery/</guid>
      <description>Something that I have to keep reminding myself is that products aren&amp;rsquo;t just products, they&amp;rsquo;re a value delivery system. Products will only be adopted when value is received by using them. This means that the initial build of the product should contain the absolute minimum resources required to begin delivering that value.
Improvements can be rolled out in later iterations, even significant breaking changes [1], so long as value delivery can be immediately proven.</description>
    </item>
    
    <item>
      <title>Software Supporting Physical</title>
      <link>https://johnforstmeier.com/notes/software-supporting-physical/</link>
      <pubDate>Tue, 20 Jul 2021 08:30:00 -0400</pubDate>
      
      <guid>https://johnforstmeier.com/notes/software-supporting-physical/</guid>
      <description>It&amp;rsquo;s somewhat of an obvious statement, but software is best utilized when directly improving the physical world. That&amp;rsquo;s something that I think can be lost from the software developer and venture capital perspective. Keeping the &amp;ldquo;world of atoms&amp;rdquo; at the forefront can help truly realize the value of software by positioning it accordingly.</description>
    </item>
    
    <item>
      <title>Initial Backwards Compatibility</title>
      <link>https://johnforstmeier.com/notes/initial-backwards-compatibility/</link>
      <pubDate>Thu, 15 Apr 2021 08:45:00 -0400</pubDate>
      
      <guid>https://johnforstmeier.com/notes/initial-backwards-compatibility/</guid>
      <description>MVPs (&amp;ldquo;minimum viable products&amp;rdquo;) shouldn&amp;rsquo;t be built in a way to handle a wide range of future use cases.
For example, an MVP for an API-based service shouldn&amp;rsquo;t focus on accommodating future expansions in its first iteration. Constructing a simple, albeit rigid, pattern addressing the immediate need is the goal. If no one is using the API, focusing on delivering something that can be used to gather feedback is more important than planning for every eventuality.</description>
    </item>
    
    <item>
      <title>Social Media Impact</title>
      <link>https://johnforstmeier.com/notes/social-media-impact/</link>
      <pubDate>Wed, 27 Jan 2021 08:30:00 -0500</pubDate>
      
      <guid>https://johnforstmeier.com/notes/social-media-impact/</guid>
      <description>There is an interesting series of questions that can be raised regarding social media listed below.
 Has the net impact of social media been positive or negative in developed nations? Has the net impact of social media been positive or negative in underdeveloped nations? If there is a difference in the answers to those questions, what causes the disparity?  These services have contributed positively and negatively to the world - identifying what distribution these contributions take would be valuable in helping to understand their proper function.</description>
    </item>
    
    <item>
      <title>Immediate Testing</title>
      <link>https://johnforstmeier.com/notes/immediate-testing/</link>
      <pubDate>Tue, 22 Dec 2020 10:45:00 -0500</pubDate>
      
      <guid>https://johnforstmeier.com/notes/immediate-testing/</guid>
      <description>Continuously testing entire code repositories increases the ability to introduce rapid changes. Being able to do this in early stages, such as the MVP, is highly valuable.
Simple approaches, like adding a unit_tests script to the repo containing just a go test ./... -coverage command [1][2] achieve this. Even though it would initially be triggered manually, doing so would provide value to the developer even before a complete CI/CD pipeline could be established.</description>
    </item>
    
  </channel>
</rss>